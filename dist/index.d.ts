// Generated by dts-bundle-generator v8.0.1

import { DeviceOsPlatform } from '@sendbird/chat';
import { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';
import { BaseMessage } from '@sendbird/chat/message';

/**
 * @module SendbirdDeskError
 * @ignore
 */
export interface IErrorType {
	code: number;
	message: string;
}
/**
 * An error class for Desk.
 * @extends {Error}
 * @since 1.0.0
 */
export declare class SendbirdDeskError extends Error {
	readonly code: number;
	/**
	 * @since 1.0.0
	 * @param {string} message - Error message.
	 * @param {number} code - Error code.
	 */
	constructor(message: string, code: number);
	static get Type(): Record<string, IErrorType>;
	/**
	 * @static
	 * @since 1.0.5
	 * @ignore
	 * @desc Create an error.
	 */
	static create(type?: IErrorType): Error;
	/**
	 * @static
	 * @since 1.0.0
	 * @ignore
	 * @desc Throw an error.
	 */
	static throw(type: IErrorType): void;
}
/**
 * @module Agent
 * @ignore
 */
export type AgentParamsLegacy = {
	user: number;
	displayName?: string;
	photoThumbnailUrl: string;
};
export type AgentParams = {
	id: number;
	displayName?: string;
	sendbirdId: string;
	photoThumbnailUrl?: string;
} | AgentParamsLegacy;
/**
 * @since 1.0.0
 */
export declare class Agent {
	userId: number;
	name: string;
	profileUrl: string;
	sendbirdId?: string;
	/**
	 * @since 1.0.0
	 * @private
	 * @desc Create an agent.
	 */
	constructor(params: AgentParams);
	/**
	 * @since 1.0.0
	 * @private
	 * @desc Parse JSON data and patch Agent object.
	 */
	fetchFromJSON(params: AgentParams): void;
}
/**
 * @module RelatedChannel
 * @ignore
 */
export interface RelatedChannelParams {
	channel_url: string;
	name: string;
}
/**
 * @classdesc RelatedChannel
 * @since 1.0.14
 */
export declare class RelatedChannel {
	channelUrl: string;
	name: string;
	/**
	 * @since 1.0.14
	 * @private
	 * @desc Create a related channel
	 */
	constructor(params: RelatedChannelParams);
	/**
	 * @since 1.0.14
	 * @private
	 * @desc Parse JSON data and patch RelatedChannel object.
	 */
	fetchFromJSON(params: RelatedChannelParams): void;
}
export type OverloadProps<TOverload> = Pick<TOverload, keyof TOverload>;
export type OverloadUnionRecursive<TOverload, TPartialOverload = unknown> = TOverload extends (...args: infer TArgs) => infer TReturn ? TPartialOverload extends TOverload ? never : OverloadUnionRecursive<TPartialOverload & TOverload, TPartialOverload & ((...args: TArgs) => TReturn) & OverloadProps<TOverload>> | ((...args: TArgs) => TReturn) : never;
export type OverloadUnion<TOverload extends (...args: any[]) => any> = Exclude<OverloadUnionRecursive<(() => never) & TOverload>, TOverload extends () => never ? never : () => never>;
/**
  This is to help with overloading optional functions in TypeScript.
  For example CreateTicketParams in src/model/ticketUtils/types.ts
  createTicket(title.required, name.required, groupKey?.optional, customFields?.optional, ..., callback.required)
  in this case, you need union of all possible overloads, and this type helps with that.
  ie: [title, name, callback] | [title, name, groupKey, callback] | [title, name, groupKey, customFields, callback]...
  Slack: https://sendbird.slack.com/archives/G01290GCDCN/p1689903742398759
  example:
  ```
   type SbDeskAuth1 = (userId: string) => void;
   type SbDeskAuth2 = (userId: string, cb: () => void) => void;
   type SbDeskAuth3 = (userId: string, nickname: string, cb: () => void) => void;
   type SbDeskAuth4 = (userId: string, nickname: string, profile: string, cb: () => void) => void;

   type SendbirdDeskAuthType = OverloadParameters<
	SbDeskAuth1
	| SbDeskAuth2
	| SbDeskAuth3
	| SbDeskAuth4
   >;
  ```
 */
export type OverloadParameters<T extends (...args: any[]) => any> = Parameters<OverloadUnion<T>>;
declare const TicketPriorityMap: {
	readonly URGENT: "URGENT";
	readonly HIGH: "HIGH";
	readonly MEDIUM: "MEDIUM";
	readonly LOW: "LOW";
};
export type TicketPriority = typeof TicketPriorityMap[keyof typeof TicketPriorityMap];
export type Customer = {
	id: number;
	sendbirdId: string;
	project: number;
	createdAt: string;
	displayName: string;
	photoThumbnailUrl: string;
};
declare const TicketStatusMap: {
	readonly INITIALIZED: "INITIALIZED";
	readonly PROACTIVE: "PROACTIVE";
	readonly UNASSIGNED: "UNASSIGNED";
	readonly ASSIGNED: "ASSIGNED";
	readonly OPEN: "OPEN";
	readonly CLOSED: "CLOSED";
};
export type TicketStatus = typeof TicketStatusMap[keyof typeof TicketStatusMap];
export interface TicketCreateParams {
	title: string;
	name: string;
	groupKey?: string;
	customFields?: object;
	priority?: TicketPriority;
	relatedChannelUrls?: string[];
	botKey?: string;
}
export interface TicketParams {
	id: number;
	channelUrl: string;
	channelName: string;
	status?: TicketStatus;
	info?: string;
	priority?: TicketPriority;
	recentAssignment?: {
		agent?: AgentParams;
	};
	proactiveChatCreatedBy?: AgentParams;
	customer?: Customer;
	customFields?: {
		key: string;
		value: any;
	}[];
	group?: number;
	firstResponseTime?: number;
	relatedChannels?: string;
	updatedAt?: number;
}
export interface RawTicketListParams {
	offset?: number;
	limit?: number;
	order?: string;
	channelUrl?: string;
	customFieldFilter?: object;
	group?: string;
	status?: "ALL" | "OPEN" | "CLOSED";
}
export interface TicketListFilter {
	limit?: number;
	customFieldFilter?: object;
	group?: string;
}
export interface TicketListParams extends TicketListFilter {
	status?: "ALL" | "OPEN" | "CLOSED";
}
export type CloseTicketCb = (succes: TicketClass | null, error: Error | null) => void;
export type CloseTicketParams1 = () => void;
export type CloseTicketParams2 = (comment: string) => void;
export type CloseTicketParams3 = (cb: CloseTicketCb) => void;
export type CloseTicketParams4 = (comment: string, cb: CloseTicketCb) => void;
export type CloseTicketParams = OverloadParameters<CloseTicketParams1 | CloseTicketParams2 | CloseTicketParams3 | CloseTicketParams4>;
export type CloseTicketParamsMap = {
	comment: string;
	cb: CloseTicketCb;
};
export type CreateTicketCb = (succes: TicketClass | null, error: Error | null) => void;
export type CreateTicketParams1 = (title: string, name: string, cb: CreateTicketCb) => void;
export type CreateTicketParams2 = (title: string, name: string, groupKey: string | null, cb: CreateTicketCb) => void;
export type CreateTicketParams3 = (title: string, name: string, groupKey: string | null, customFields: object | null, cb: CreateTicketCb) => void;
export type CreateTicketParams4 = (title: string, name: string, groupKey: string | null, customFields: object | null, priority: TicketPriority | null, cb: CreateTicketCb) => void;
export type CreateTicketParams5 = (title: string, name: string, groupKey: string | null, customFields: object | null, priority: TicketPriority | null, relatedChannelUrls: string[] | null, cb: CreateTicketCb) => void;
export type CreateTicketParams6 = (title: string, name: string, groupKey: string | null, customFields: object | null, priority: TicketPriority | null, relatedChannelUrls: string[] | null, botKey: string | null, cb: CreateTicketCb) => void;
export type CreateTicketParams = OverloadParameters<CreateTicketParams1 | CreateTicketParams2 | CreateTicketParams3 | CreateTicketParams4 | CreateTicketParams5 | CreateTicketParams6>;
export type CreateTicketArgsMap = {
	title: string;
	name: string;
	groupKey?: string | null;
	customFields?: object | null;
	priority?: TicketPriority | null;
	relatedChannelUrls?: string[] | null;
	botKey?: string | null;
	cb: CreateTicketCb;
};
export type RefreshTicketCb = (ticket: TicketClass | null, error: Error | null) => void;
export type Reopencb = (ticket: TicketClass | null, error: Error | null) => void;
export type CancelTicketCb = (ticket: TicketClass | null, error: Error | null) => void;
export type CancelTicketParams1 = (cb: CancelTicketCb) => void;
export type CancelTicketParams2 = (groupKeyForTransfer: string, cb: CancelTicketCb) => void;
export type CancelTicketParams = OverloadParameters<CancelTicketParams1 | CancelTicketParams2>;
export type CancelTicketParamsMap = {
	groupKeyForTransfer: string;
	cb: CancelTicketCb;
};
export type ConfirmEndOfChatCb = (ticket: TicketClass | null, error: Error | null) => void;
export type SelectQuestionCb = (ticket: TicketClass | null, error: Error | null) => void;
export type SetPriorityCb = (ticket: TicketClass | null, error: Error | null) => void;
export type SetRelatedChannelUrlsCb = (ticket: TicketClass | null, error: Error | null) => void;
export type SetCustomFieldsCb = (ticket: TicketClass | null, error: Error | null) => void;
export type GetOpenCountResponse = {
	ACTIVE: number;
	ASSIGNED: number;
	CLOSED: number;
	IDLE: number;
	PENDING: number;
	UNASSIGNED: number;
	WORK_IN_PROGRESS: number;
};
export type GetOpenCountCb = (data: GetOpenCountResponse | null, error: Error | null) => void;
export type GetUrlPreviewResponse = {
	url: string;
	title: string;
	siteName: string;
	description: string;
	image: string;
};
export type GetUrlPreviewCb = (data: GetUrlPreviewResponse | null, error: Error | null) => void;
export type GetListCb = (tickets: TicketClass[] | null, error: Error | null) => void;
export type GetAllTicketsCb = (tickets: TicketClass[] | null, error: Error | null) => void;
export type GetAllTicketsParams1 = (offset: number, filter: TicketListFilter, cb: GetAllTicketsCb) => void;
export type GetAllTicketsParams2 = (offset: number, cb: GetAllTicketsCb) => void;
export type GetAllTicketsParams = OverloadParameters<GetAllTicketsParams1 | GetAllTicketsParams2>;
export interface OpenedTicketClass extends TicketClass {
	status: "OPEN" | "UNASSIGNED" | "ASSIGNED" | "PROACTIVE";
}
export type GetOpenedListCb = (tickets: OpenedTicketClass[] | null, error: Error | null) => void;
export type GetOpenedListParams1 = (offset: number, filter: TicketListFilter, cb: GetOpenedListCb) => void;
export type GetOpenedListParams2 = (offset: number, cb: GetOpenedListCb) => void;
export type GetOpenedListParams = OverloadParameters<GetOpenedListParams1 | GetOpenedListParams2>;
export interface ClosedTicketClass extends TicketClass {
	status: "CLOSED";
}
export type GetClosedListCb = (tickets: ClosedTicketClass[] | null, error: Error | null) => void;
export type GetClosedListParams1 = (offset: number, filter: TicketListFilter, cb: GetClosedListCb) => void;
export type GetClosedListParams2 = (offset: number, cb: GetClosedListCb) => void;
export type GetClosedListParams = OverloadParameters<GetClosedListParams1 | GetClosedListParams2>;
export type GetByChannelUrlParamsMap = {
	channelUrl: string;
	cachingEnabled: boolean;
	cb: GetByChannelUrlCb;
};
export type GetByChannelUrlCb = (tickets: TicketClass | null, error: Error | null) => void;
export type GetByChannelUrlParams1 = (channelUrl: string, cachingEnabled: boolean, callback: GetByChannelUrlCb) => void;
export type GetByChannelUrlParams2 = (channelUrl: string, callback: GetByChannelUrlCb) => void;
export type GetByChannelUrlParams = OverloadParameters<GetByChannelUrlParams1 | GetByChannelUrlParams2>;
export type SubmitFeedbackCb = (ticket: TicketClass | null, error: Error | null) => void;
declare class TicketClass {
	id: number;
	title: string;
	status: TicketStatus;
	info: object | null;
	priority: TicketPriority;
	agent: Agent | null;
	customer: Customer | null;
	customFields: object;
	group: number;
	relatedChannels: RelatedChannel[];
	channel: GroupChannel;
	channelUrl: string;
	updatedAt: number;
	static create(...params: CreateTicketParams): void;
	static isDeskCustomType(customType: string): boolean;
	static defaultLimit(): number;
	static clearCache(): void;
	static getOpenCount(cb: GetOpenCountCb): void;
	static getUrlPreview(url: string, cb: GetUrlPreviewCb): void;
	static getList(params: RawTicketListParams, cb: GetListCb): void;
	static getAllTickets(...params: GetAllTicketsParams): void;
	static getOpenedList(...params: GetOpenedListParams): void;
	static getClosedList(...params: GetClosedListParams): void;
	static getByChannelUrl(...params: GetByChannelUrlParams): void;
	static submitFeedback(message: BaseMessage, score: number, comment: string, cb: SubmitFeedbackCb): void;
	static confirmEndOfChat(message: BaseMessage, confirm: "yes" | "no", cb: ConfirmEndOfChatCb): void;
	instanceSubmitFeedback(message: BaseMessage, score: number, comment: string, cb: SubmitFeedbackCb): void;
	instanceConfirmEndOfChat(message: BaseMessage, confirm: "yes" | "no", cb: ConfirmEndOfChatCb): void;
	close(...params: CloseTicketParams): void;
	refresh(cb: RefreshTicketCb): void;
	reopen(cb: Reopencb): void;
	cancel(...params: CancelTicketParams): void;
	fetchFromJSON(json: TicketParams): void;
	selectQuestion(faqFileId: number, question: string, cb: SelectQuestionCb): void;
	setPriority(priority: TicketPriority, cb: SetPriorityCb): void;
	setRelatedChannelUrls(relatedChannelUrls: string[], cb: SetRelatedChannelUrlsCb): void;
	setCustomFields(customFields: object, cb: SetCustomFieldsCb): void;
}
/**
 * @since 1.0.0
 */
export declare class Ticket implements TicketClass {
	id: number;
	title: string;
	status: TicketStatus;
	info: object | null;
	priority: TicketPriority;
	agent: Agent | null;
	proactiveChatCreatedBy: Agent | null;
	customer: Customer | null;
	customFields: object;
	group: number;
	firstResponseTime: number;
	relatedChannels: RelatedChannel[];
	channel: GroupChannel;
	channelUrl: string;
	updatedAt: number;
	/**
	 * @since 1.0.0
	 * @private
	 * @desc Create a ticket.
	 */
	constructor(params: TicketParams);
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Ticket status
	 * @property {string} INITIALIZED - ticket is created but not able to assign.
	 * @property {string} PROACTIVE - ticket is introduced as proactive ticket.
	 * @property {string} UNASSIGNED - ticket is activated and able to assign.
	 * @property {string} ASSIGNED - ticket is assigned by an agent.
	 * @property {string} OPEN - ticket is activated.
	 * @property {string} CLOSED - ticket is closed.
	 */
	static get Status(): {
		readonly INITIALIZED: "INITIALIZED";
		readonly PROACTIVE: "PROACTIVE";
		readonly UNASSIGNED: "UNASSIGNED";
		readonly ASSIGNED: "ASSIGNED";
		readonly OPEN: "OPEN";
		readonly CLOSED: "CLOSED";
	};
	/**
	 * @since 1.0.0
	 * @private
	 * @desc Parse JSON data and patch Ticket object.
	 */
	fetchFromJSON(params: TicketParams): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	_fetchChannel(): Promise<void>;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	static _getTicketList<T extends TicketClass | OpenedTicketClass | ClosedTicketClass>(params: RawTicketListParams): Promise<T[]>;
	/**
	 * @since 1.0.0
	 * @desc Refresh ticket info.
	 * @param {function(ticket:Ticket, err:Error)} cb - cb function.
	 */
	refresh(cb: RefreshTicketCb): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	_refresh(): Promise<TicketClass>;
	/**
	 * @since 1.0.6
	 * @desc Reopen closed ticket.
	 * @param {function} cb - Function(res:Ticket, err:Error).
	 */
	reopen(cb: Reopencb): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	_reopen(): Promise<TicketClass>;
	/**
	 * @since 1.0.18
	 * @desc Cancel the assignment and set it to open.
	 * @param {string} groupKeyForTransfer - Group key for transfer(optional)
	 * @param {function} cb - Function(res:Ticket, err:Error).
	 */
	cancel(...params: CancelTicketParams): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	_cancel(args: CancelTicketParamsMap): Promise<TicketClass>;
	/**
	 * @since 1.0.16
	 * @desc Force close an assigned ticket.
	 * @param {string} comment - Comment for closing the ticket.
	 */
	close(...params: CloseTicketParams): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	_close(args: CloseTicketParamsMap): Promise<TicketClass>;
	/**
	 * @since 1.0.18
	 * @desc Select a question.
	 * @param {number} faqFileId - FAQ file ID.
	 * @param {string} question - Question text.
	 * @param {function} callback - Function(res:object, err:Error).
	 */
	selectQuestion(faqFileId: number, question: string, cb: SelectQuestionCb): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	_selectQuestion(faqFileId: number, question: string): Promise<TicketClass>;
	/**
	 * @since 1.0.10
	 * @desc Set ticket priority.
	 * @param {string} priority - priority.
	 * @param {function} callback - Function(res:Ticket, err:Error).
	 */
	setPriority(priority: TicketPriority, cb: SetPriorityCb): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	_setPriority(priority: TicketPriority): Promise<TicketClass>;
	/**
	 * @since 1.0.14
	 * @desc Set ticket related channel URLs.
	 * @param {array<string>} relatedChannelUrls - related channel URLs.
	 * @param {function} callback - Function(res:Ticket, err:Error).
	 */
	setRelatedChannelUrls(relatedChannelUrls: string[], cb: SetRelatedChannelUrlsCb): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	_setRelatedChannelUrls(relatedChannelUrls: string[]): Promise<TicketClass>;
	/**
	 * @since 1.0.10
	 * @desc Set ticket customFields.
	 * @param {object} customFields - customFields object (key-value).
	 * @param {function} callback - Function(res:Ticket, err:Error).
	 */
	setCustomFields(customFields: object, cb: SetCustomFieldsCb): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	_setCustomFields(customFields: object): Promise<TicketClass>;
	/**
	 * @ignore
	 */
	static isDeskCustomType(customType: string): boolean;
	/**
	 * @ignore
	 */
	static get defaultLimit(): number;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Clear cached ticket. Clear all if channelUrl is not specified.
	 */
	static clearCache(channelUrl?: string): void;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Create new ticket and returns the ticket within cb.
	 * @param {string} title - Ticket title.
	 * @param {string} name - User name.
	 * @param {string} groupKey - Agent group key (optional).
	 * @param {object} customFields - customField (optional).
	 * @param {string} priority - priority (optional).
	 * @param {array<string>} relatedChannelUrls - related channel URLs (optional).
	 * @param {string} botKey - botKey (optional).
	 * @param {function} cb - Function(ticket:Ticket, err:Error).
	 */
	static create(...params: CreateTicketParams): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	static _create(args: CreateTicketArgsMap): Promise<TicketClass>;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Get ticket count for each state: UNASSIGNED, ASSIGNED, CLOSED.
	 * @param {function} callback - Function(result:GetOpenCountResponse, err:Error).
	 */
	static getOpenCount(cb: GetOpenCountCb): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	static _getOpenCount(): Promise<GetOpenCountResponse>;
	/**
	 * @static
	 * @since 1.0.22
	 * @desc Get ticket from channel URL. Use caching for optimization.
	 * @param {string} channelUrl - channel URL.
	 * @param {boolean} _cachingEnabled - to get ticket from cache or not.
	 * @param {function} _callback - Function(ticket:Ticket, err:Error).
	 */
	/**
	 * @static
	 * @since 1.0.22
	 * @desc Get ticket from channel URL. no caching by default.
	 * @param {string} channelUrl - channel URL.
	 * @param {function} _callback - Function(ticket:Ticket, err:Error).
	 */
	static getByChannelUrl(...params: GetByChannelUrlParams): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	static _getByChannelUrl(args: Omit<GetByChannelUrlParamsMap, "cb">): Promise<TicketClass>;
	/**
	 * @static
	 * @since 1.0.23
	 * @desc Lists all tickets.
	 * @param {integer} filters.offset - list offset.
	 * @param {object} filters.customFieldFilter - customField filter.
	 * @param {string} filters.group - group key(to filter tickets by a team).
	 * @param {string} filters.status - status to get tickets. ('all', 'CLOSED', 'OPEN').
	 * @param {function} callback - Function(list:Array<Ticket>, err:Error)
	 */
	static getList(params: RawTicketListParams, cb: GetListCb): void;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Load opened ticket list.
	 * @param {integer} offset - list offset.
	 * @param {object} customFieldFilter - customField filter.
	 * @param {function} callback - Function(list:Array<Ticket>, err:Error)
	 */
	static getOpenedList(...params: GetOpenedListParams): void;
	/**
	 * @static
	 * @since 1.0.21
	 * @desc Lists all tickets.
	 * @param {integer} offset - list offset.
	 * @param {object} customFieldFilter - customField filter.
	 * @param {function} callback - Function(list:Array<Ticket>, err:Error)
	 */
	static getAllTickets(...params: GetAllTicketsParams): void;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Load closed ticket list.
	 * @param {integer} offset - list offset.
	 * @param {object} customFieldFilter - customField filter.
	 * @param {function} callback - Function(list:Array<Ticket>, err:Error)
	 */
	static getClosedList(...params: GetClosedListParams): void;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Get URL preview info from URL.
	 * @param {string} url - URL to load preview metadata.
	 * @param {function} callback - Function(result:Object, err:Error).
	 */
	static getUrlPreview(url: string, cb: GetUrlPreviewCb): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	static _getUrlPreview(url: string): Promise<GetUrlPreviewResponse>;
	/**
	 * @since 1.0.0
	 * @desc Reply to confirm-end-of-chat request in yes or no.
	 */
	static confirmEndOfChat(message: BaseMessage, confirm: "yes" | "no", cb: ConfirmEndOfChatCb): void;
	/**
	 * @since 1.0.0
	 * @desc Reply to confirm-end-of-chat request in yes or no.
	 * This shouldnt be static, but it is for backwards compatibility
	 */
	instanceConfirmEndOfChat(message: BaseMessage, confirm: "yes" | "no", cb: ConfirmEndOfChatCb): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	static _confirmEndOfChat(message: BaseMessage, confirm: "yes" | "no"): Promise<TicketClass>;
	/**
	 * @since 1.0.8
	 * @desc Submit feedback with a score and a comment.
	 */
	static submitFeedback(message: BaseMessage, score: number, comment: string | undefined, cb: SubmitFeedbackCb): void;
	/**
	 * @since 1.0.8
	 * @desc Submit feedback with a score and a comment.
	 */
	instanceSubmitFeedback(message: BaseMessage, score: number, comment: string | undefined, cb: SubmitFeedbackCb): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 * This shouldnt be static, but it is for backwards compatibility
	 */
	static _submitFeedback(message: BaseMessage, score: number, comment?: string): Promise<TicketClass>;
}
declare class Message {
	/**
	 * @static
	 * @since 1.0.0
	 * @desc message custom type.
	 * @property {string} RICH_MESSAGE - SENDBIRD_DESK_RICH_MESSAGE
	 * @property {string} ADMIN_MESSAGE - SENDBIRD_DESK_ADMIN_MESSAGE_CUSTOM_TYPE
	 */
	static get CustomType(): {
		RICH_MESSAGE: string;
		ADMIN_MESSAGE: string;
	};
	/**
	 * @static
	 * @since 1.0.0
	 * @desc message data type.
	 * @property {string} TICKET_INQUIRE_CLOSURE - SENDBIRD_DESK_INQUIRE_TICKET_CLOSURE
	 * @property {string} TICKET_ASSIGN - TICKET_ASSIGN
	 * @property {string} TICKET_TRANSFER - TICKET_TRANSFER
	 * @property {string} TICKET_CLOSE - TICKET_CLOSE
	 * @property {string} URL_PREVIEW - URL_PREVIEW
	 */
	static get DataType(): {
		TICKET_INQUIRE_CLOSURE: string;
		TICKET_ASSIGN: string;
		TICKET_TRANSFER: string;
		TICKET_CLOSE: string;
		TICKET_FEEDBACK: string;
		URL_PREVIEW: string;
	};
	/**
	 * @static
	 * @since 1.0.0
	 * @desc closure inquiry messsage state.
	 * @property {string} WAITING - WAITING
	 * @property {string} CONFIRMED - CONFIRMED
	 * @property {string} DECLINED - DECLINED
	 */
	static get ClosureState(): {
		WAITING: string;
		CONFIRMED: string;
		DECLINED: string;
	};
	/**
	 * @module Message
	 * @ignore
	 */
	/**
	 * @static
	 * @since 1.0.8
	 * @desc closure inquiry messsage state.
	 * @property {string} WAITING - WAITING
	 * @property {string} CONFIRMED - CONFIRMED
	 */
	static get FeedbackState(): {
		WAITING: string;
		CONFIRMED: string;
	};
	/**
	 * @ignore
	 */
	static get UrlRegExp(): RegExp;
}
export type SbDeskAuthUserId = (userId: string) => void;
export type SbDeskAuthUserIdCb = (userId: string, cb: () => void) => void;
export type SbDeskAuthUserIdToken = (userId: string, accessToken: string) => void;
export type SbDeskAuthUserIdTokenCb = (userId: string, accessToken: string, cb?: () => void) => void;
export type SendbirdDeskAuthType = OverloadParameters<SbDeskAuthUserId | SbDeskAuthUserIdCb | SbDeskAuthUserIdToken | SbDeskAuthUserIdTokenCb>;
export type SendbirdAuthParamsMap = {
	userId: string;
	accessToken: string;
	cb: () => void;
};
export type CusotmerResponseRaw = {
	id: number;
	key: string;
	value: string;
};
export type CustomerResponseFormatted = {
	[key: string]: string;
};
/** SendbirdDesk SDK
 */
export default class SendbirdDesk {
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Get Desk SDK version.
	 */
	static get version(): string;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc SendBirdDeskError class reference.
	 * @type {module:SendBirdDeskError}
	 */
	static get Error(): typeof SendbirdDeskError;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Agent class reference.
	 * @type {module:Agent}
	 */
	static get Agent(): typeof Agent;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Ticket class reference.
	 * @type {module:Ticket}
	 */
	static get Ticket(): typeof Ticket;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Message class reference.
	 * @type {module:Message} - BaseMessage in Sendbird Messaging SDK
	 */
	static get Message(): typeof Message;
	/**
	 * @static
	 * @since 1.0.14
	 * @desc RelatedChannel class reference.
	 * @type {module:RelatedChannel}
	 */
	static get RelatedChannel(): typeof RelatedChannel;
	/**
	 * @ignore
	 */
	static get UrlRegExp(): RegExp;
	/**
	 * @static
	 * @since 1.0.1
	 * @desc Initialize SDK.
	 */
	static init(sendbird: SendbirdGroupChat, platform?: DeviceOsPlatform): void;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Authenticate and connect to Desk server.
	 * @param {string} userId - User ID.
	 * @param {string=} accessToken - Access token(Optional).
	 * @param {function} callback - Function() => void.
	 */
	static authenticate(...params: SendbirdDeskAuthType): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	static _authenticate(params: SendbirdAuthParamsMap): Promise<void>;
	/**
	 * @static
	 * @since 1.0.1
	 * @desc Check if the channel belongs to Desk.
	 */
	static isDeskChannel(channel: GroupChannel): boolean;
	/**
	 * @ignore
	 */
	static setApiHost(host: string): void;
	/**
	 * @static
	 * @since 1.0.0
	 * @desc Set SDK to debug mode which adds internal logging on desk event.
	 */
	static setDebugMode(): void;
	/**
	 * @static
	 * @since 1.0.8
	 * @desc Set customer customFields(Must be defined in dashboard).
	 * @param {object} customFields - customFields object (key-value).
	 * @param {function} callback - Function(res: object, err: Error).
	 */
	static setCustomerCustomFields<T extends object>(customFields: T, cb: (res: Partial<T> | null, err: Error | null) => void): void;
	/**
	 * @ignore
	 * @private
	 * @since 1.1.0
	 */
	static _setCustomerCustomFields<T extends object>(customFields: T): Promise<Partial<T>>;
	static _resToCustomFields(data: CusotmerResponseRaw[]): CustomerResponseFormatted;
}

export {};
